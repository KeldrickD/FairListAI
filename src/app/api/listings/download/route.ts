import { NextResponse } from 'next/server'
import { PropertyData } from '@/components/listing/PropertyForm'
import PDFDocument from 'pdfkit'

interface DownloadRequest {
  propertyData: PropertyData
  generatedListing: {
    description: string
    socialMedia: {
      instagram: string
      facebook: string
      tiktok: string
    }
    hashtags: string[]
  }
}

export async function POST(request: Request) {
  try {
    const { propertyData, generatedListing }: DownloadRequest = await request.json()

    // Create a new PDF document
    const doc = new PDFDocument()
    const chunks: Buffer[] = []

    // Collect PDF data chunks
    doc.on('data', (chunk) => chunks.push(chunk))
    doc.on('end', () => {
      // This will be handled by the response
    })

    // Add content to the PDF
    doc
      .fontSize(24)
      .text('Property Listing', { align: 'center' })
      .moveDown()
      .fontSize(18)
      .text(`${propertyData.bedrooms} Bed, ${propertyData.bathrooms} Bath ${propertyData.propertyType}`, { align: 'center' })
      .text(propertyData.location, { align: 'center' })
      .text(`$${propertyData.price.toLocaleString()}`, { align: 'center' })
      .moveDown()
      .fontSize(14)
      .text('Property Details', { underline: true })
      .moveDown()
      .text(`Square Feet: ${propertyData.squareFeet.toLocaleString()}`)
      .text(`Property Type: ${propertyData.propertyType}`)
      .text(`Bedrooms: ${propertyData.bedrooms}`)
      .text(`Bathrooms: ${propertyData.bathrooms}`)
      .moveDown()
      .text('Features:', { underline: true })
      .moveDown()
      .text(propertyData.features.join(', '))
      .moveDown()
      .text('Description:', { underline: true })
      .moveDown()
      .text(generatedListing.description)
      .moveDown()
      .text('Social Media Captions:', { underline: true })
      .moveDown()
      .text('Instagram:', { underline: true })
      .text(generatedListing.socialMedia.instagram)
      .moveDown()
      .text('Facebook:', { underline: true })
      .text(generatedListing.socialMedia.facebook)
      .moveDown()
      .text('TikTok:', { underline: true })
      .text(generatedListing.socialMedia.tiktok)
      .moveDown()
      .text('Hashtags:', { underline: true })
      .moveDown()
      .text(generatedListing.hashtags.join(' '))
      .moveDown()
      .text('Additional Notes:', { underline: true })
      .moveDown()
      .text(propertyData.additionalNotes || 'None')
      .moveDown()
      .fontSize(10)
      .text('Generated by FairListAI', { align: 'center' })
      .text(new Date().toLocaleDateString(), { align: 'center' })

    // Finalize the PDF
    doc.end()

    // Wait for the PDF to be generated
    await new Promise((resolve) => doc.on('end', resolve))

    // Combine chunks into a single buffer
    const pdfBuffer = Buffer.concat(chunks)

    // Return the PDF with appropriate headers
    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="listing-${propertyData.location.toLowerCase().replace(/\s+/g, '-')}.pdf"`,
      },
    })
  } catch (error) {
    console.error('Error generating PDF:', error)
    return NextResponse.json(
      {
        success: false,
        message: error instanceof Error ? error.message : 'Failed to generate PDF',
      },
      { status: 500 }
    )
  }
} 